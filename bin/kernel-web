#!/usr/bin/ruby

kernel_source = "/srv/kbuild/kernel-source.git"
kernel_livepatch = "/srv/kbuild/kgraft-patches.git"

def usage
  puts "usage: kernel-web SUSE|openSUSE <output directory>"
  exit 1
end


def branches_with_flag flag
  branches = []
  File.open("branches.conf", "rb"){|f|
    f.each_line{|l|
      branch, _ , flags = l.chomp.partition ":"
      next if branch.length < 1
      next if branch =~ /#/
      flags, _ = flags.partition "#"
      flags = flags.split /[[:space:]]+/
      branches.push branch if flags.include? flag
    }
  }
  branches
end

def expand_template tmpl, hash
  hash.keys.each{|k|
    tmpl = tmpl.gsub(/@#{k}@/,hash[k])
  }
  tmpl
end

def get_branchinfo repo, branch
  cmd=%W(git --git-dir #{repo} show #{branch}:README.BRANCH)
  stdin, inpipe = IO.pipe
  outpipe, stdout= IO.pipe
  errpipe, stderr= IO.pipe
  pid = spawn(*cmd, :err=>stderr, :out=>stdout, :in=>stdin, :close_others=>true)
  [stdin, stdout, stderr].each{|fd| fd.close}
  out = ''
  err = ''
  threads = [ Thread.new{ out = outpipe.read }, Thread.new{ err = errpipe.read } ]
  Process.waitpid pid, 0 rescue nil
  threads.each{|t|t.join}
  return "" if $? != 0
  "<p>" + out.gsub(/<([^>]*)>/,'&lt;<a href="mailto:\1?subject='+branch+'%20branch">\1</a>&gt;').gsub(/^$/,"</p><p>") + "</p>"
end

branches = branches_with_flag "publish"

upstream = %w(linux-next vanilla)
opensuse = %w(master stable) + branches.select{|b| b =~ /^openSUSE/}.sort.reverse
sle = branches.select{|b| b =~ /^SLE1[0-9](-SP[0-9])?$/}.sort.reverse
sle_add = (branches-sle).select{|b| b =~ /^SLE1[0-9](-SP[0-9])?/}.sort.reverse

branches = upstream + opensuse + sle + sle_add

all_livepatches = `git ls-remote #{kernel_livepatch}`.lines.select{|l| l =~ %r,^[0-9a-f]{40}\trefs/heads/.*_Update_[0-9]+$,}.map{|l| l.chomp.sub(%r,^[0-9a-f]{40}\trefs/heads/,,"")}
branch_livepatches = {}
branches.each{|b|
  livepatches = all_livepatches.select{|l| l =~ /^#{b}_Update_/}.sort{|a,b| b.sub(/^.*_Update_/,"").to_i <=> a.sub(/^.*_Update_/,"").to_i}
  branch_livepatches[b] = livepatches if livepatches.length > 0
}

branch_entry = '<li><a href="@branch@.html">@branch@</a></li>'
branch_lp_entry = '<li><a href="@branch@-lp.html">@branch@</a></li>'

title = '@open@SUSE Kernel Resources'

branch_title = '@branch@ Kernel Branch'

open = ''
open = 'open' if ARGV[0] == 'openSUSE'
usage if open != open && ARGV[0] != 'SUSE'
usage if ARGV.length != 2
output = ARGV[1]

tmpl = expand_template(File.read("kernel-web/#{open}SUSE.html"), {
  "opensuse" =>  opensuse.map{|b| expand_template(branch_entry, {"branch" => b})}.join("\n"),
  "upstream" => upstream.map{|b| expand_template(branch_entry, {"branch" => b})}.join("\n"),
  "sle_add" => sle_add.map{|b| expand_template(branch_entry, {"branch" => b})}.join("\n"),
  "sle" => sle.map{|b| expand_template(branch_entry, {"branch" => b})}.join("\n"),
  "lp_branches" => branch_livepatches.keys.map{|b| expand_template(branch_lp_entry, {"branch" => b})}.join("\n"),
})

content = File.read("kernel-web/index-content")

File.write "#{output}/index.html", expand_template(tmpl, {
  "content" => content,
  "title" => title,
  "open" => open
})

content = File.read("kernel-web/branch-content")
lp_content = File.read("kernel-web/livepatch-content")

branches.each{|b|
  repo = b
  repo = 'HEAD' if b == 'master'
  livepatches = "<h2>live patches</h2><p> Sources of kernel live patch updates " +
    branch_livepatches[b].map{|l| "<a href=\"https://github.com/SUSE/kernel-livepatch/tree/#{l}\">#{l}</a>" }.join(" ") + "</p>" rescue ''
  File.write "#{output}/#{b}.html", expand_template(tmpl, {
    "content" => content,
    "title" => branch_title,
    "open" => open,
    "branch" => b,
    "repo" => repo,
    "livepatches" => livepatches,
    "branchinfo" => get_branchinfo(kernel_source, b),
  })
  File.write "#{output}/#{b}-lp.html", expand_template(tmpl, {
    "content" => lp_content,
    "title" => "Live Patches for " + branch_title,
    "open" => open,
    "branch" => b,
    "livepatches" => livepatches,
    "branchinfo" => get_branchinfo(kernel_livepatch, branch_livepatches[b][0]),
  }) if branch_livepatches[b]
}
